#!/usr/bin/env node

/* eslint-disable no-console */

const {static: staticDir} = require('../config').paths;

const fs = require('fs');
const path = require('path');
const glob = require('glob');
const btoa = require('btoa');
const SVGO = require('svgo');
const mkdirp = require('mkdirp');
const svgo = new SVGO();

/**
 * these are the individual functions used above...
 */

const makeDest = destPath => new Promise((resolve, reject) => {
    fs.exists(destPath, (exists) => {
        if (exists) {
            resolve();
        } else {
            mkdirp(destPath, err => err ? reject(err) : resolve());
        }
    });
});

const getIcons = paths => Promise.all(
    paths.map(file =>
        new Promise((resolve, reject) => {
            fs.readFile(file, { encoding: 'utf-8' }, (err, data) => {
                if (err) { reject(err); }
                svgo.optimize(data, result => {
                    resolve({
                        name: path.parse(file).name,
                        data: result
                    });
                });
            });
        })
    )
);

// order by height, then width, then name
const sortIconsBySize = images => images.sort((a, b) => {
    const aInfo = a.data.info;
    const bInfo = b.data.info;
    if (aInfo.height !== bInfo.height) {
        return aInfo.height - bInfo.height;
    } else if (aInfo.width !== bInfo.width) {
        return bInfo.width  - aInfo.width;
    } else {
        return a.name.localeCompare(b.name);
    }
});

const generateSass = ({dest, fileName}, svgs) => {
    const SVGSass = svgs.map(file => {
        const {name, data: fileData, data: {info: {width = 0, height = 0}}} = file;
        return `
                %svg-i-${name},
                .svg-i-${name} {
                    background-image: url(data:image/svg+xml;base64,${btoa(fileData.data)});
                    background-position: 0 0;
                    width: ${width}px;
                    height: ${height}px;
                }
                .svg .i-${name} {
                    @extend %svg-i-${name} !optional;
                }
        `.replace(/ {8}/g, '');
    });
    // create svg scss file
    return new Promise((resolve, reject) => {
        fs.writeFile(
            path.join(dest, fileName), `
                // THIS FILE WAS AUTOMATICALLY GENERATED BY
                // ${__filename}
                // DO NOT EDIT IT!

                @if ($svg-support) {
                    ${SVGSass.join('').trim()}
                }
            `.trim().replace(/ {16}/g, ''),
            err => err ? reject(err) : resolve(svgs)
        );
    });
};

module.exports = [{
    title: 'Create sprites',
    task: () => ['commercial', 'global', 'membership', 'video'].map(target => {
        const src = path.join(staticDir, 'src', 'images', target);
        const dest = path.join(staticDir, 'src', 'stylesheets', 'icons');
        const fileName = `_${target}-icons-svg.scss`;

        const iconPaths = glob.sync(path.join(src, '*.svg'));

        return makeDest(dest)
            .then(getIcons.bind(null, iconPaths))
            .then(sortIconsBySize)
            .then(svgs => generateSass({dest, fileName}, svgs))
            .catch(e => console.log(e));
    })
}];
